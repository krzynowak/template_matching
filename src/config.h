#ifndef _CONFIG_H_
#define _CONFIG_H_

#include <stdint.h>
#include <stdio.h>

#define OFFSET ( 1000 * sizeof(uint16_t) )  /* Offset for correct file reading */
#define ELECTRODE_NUMBER 513U  /* Total number of electrodes available */
#define TRACE_CUT_OFF_TIME 55U  /* Cutoff time for traces */


#define NEURON_ID_SIZE 7U  /* How many neurons to test for */
#define RECORDING_ELECTRODE_INDICES 7U  /* How many electrodes to test for */
#define ARTIFACTS_PER_ELECTRODE 100U  /* Total artifacts per lectrode */


#define NEIGHBOURS 2U  /* How many element combinations to test for - assumed max amount of neurons responding to single impuls */
#define COMBINATIONS 21U //There are 21 non repeating 2 element combinations that can be made from an 7 element set

#define MIN_OFFSET -1  /* One less than minimum value for for combination generation */
#define MAX_OFFSET 32  /* Max vlaue for combination generation */

#define SHARED_MEMORY (COMBINATIONS * (sizeof(float) + sizeof(int) * RECORDING_ELECTRODE_INDICES))  /* Sahred memory available to each cuda block */

#define STREAMS 1  /* Streams to use */
#define PRIMARY_THREAD 0U  /* Which thread does the final operations - coalesce thread results and send them back */
#define DEFAULT_STREAM -1  /* Used for reporting error */



/*
 * Artifacts for this calculation
 */
const float artifacts[RECORDING_ELECTRODE_INDICES][ARTIFACTS_PER_ELECTRODE]
{  
    {-322.375, -306.6875, -244.875, -232.5, -230.8125, -258.1875, -317.125, -329.375, -330.5, -326.625, -320.375, -308.125, -287.5625, -289.25, -325.0625, -334.375, -321.8125, -330.8125, -356.25, -377.5625, -383.9375, -373.625, -355.25, -342.25, -336.125, -333.1875, -330.5, -327.8125, -325.5, -324.0, -323.625, -324.1875, -323.375, -323.5, -324.5, -324.1875, -324.3125, -325.1875, -325.8125, -325.4375, -326.1875, -327.5, -327.0625, -327.5625, -327.8125, -327.4375, -327.8125, -328.1875, -328.75, -328.625, -327.875, -327.625, -327.25, -326.9375, -327.375, -328.1875, -328.1875, -328.3125, -327.6875, -328.0, -327.0625, -327.375, -327.875, -327.8125, -328.125, -327.8125, -328.0, -327.8125, -327.5, -327.25, -327.0625, -326.4375, -326.4375, -325.3125, -325.1875, -325.375, -325.5, -325.25, -324.8125, -325.4375, -325.5625, -325.4375, -325.8125, -324.1875, -324.875, -325.1875, -325.6875, -325.0, -324.5625, -325.6875, -325.9375, -325.75, -325.3125, -324.625, -325.875, -326.1875, -326.1875, -327.0625, -327.5, -327.125},
    {-322.88235294117646, -307.29411764705884, -248.47058823529412, -236.1764705882353, -234.88235294117646, -259.7647058823529, -312.0, -323.05882352941177, -317.0, -302.8235294117647, -278.29411764705884, -273.88235294117646, -308.47058823529414, -321.0, -351.3529411764706, -397.11764705882354, -437.4117647058824, -443.05882352941177, -422.29411764705884, -396.29411764705884, -373.47058823529414, -355.47058823529414, -339.94117647058823, -328.1764705882353, -321.70588235294116, -317.2352941176471, -314.8235294117647, -313.5882352941176, -311.88235294117646, -312.2352941176471, -312.29411764705884, -312.47058823529414, -313.6470588235294, -314.5882352941176, -315.3529411764706, -316.1764705882353, -317.88235294117646, -318.7647058823529, -319.47058823529414, -319.7647058823529, -321.05882352941177, -321.70588235294116, -322.70588235294116, -323.3529411764706, -324.11764705882354, -324.0, -324.29411764705884, -323.7647058823529, -323.88235294117646, -323.6470588235294, -324.7647058823529, -325.7647058823529, -325.4117647058824, -325.29411764705884, -325.29411764705884, -325.1764705882353, -325.8235294117647, -326.5882352941176, -325.94117647058823, -326.70588235294116, -325.88235294117646, -325.3529411764706, -325.05882352941177, -324.8235294117647, -324.3529411764706, -325.11764705882354, -325.6470588235294, -325.47058823529414, -325.7647058823529, -325.4117647058824, -325.8235294117647, -326.11764705882354, -326.2352941176471, -326.1764705882353, -325.3529411764706, -323.8235294117647, -324.2352941176471, -325.47058823529414, -325.70588235294116, -324.6470588235294, -324.47058823529414, -324.11764705882354, -324.05882352941177, -323.88235294117646, -324.47058823529414, -323.2352941176471, -323.70588235294116, -324.70588235294116, -325.1764705882353, -325.0, -324.88235294117646, -324.5882352941176, -323.94117647058823, -324.4117647058824, -325.11764705882354, -324.6470588235294, -324.8235294117647, -325.6470588235294, -326.5882352941176, -326.4117647058824},
    {-326.6842105263158, -318.6842105263158, -269.63157894736844, -245.8421052631579, -253.6315789473684, -264.7368421052632, -245.57894736842104, -258.10526315789474, -336.0, -398.05263157894734, -412.57894736842104, -397.2631578947368, -371.1578947368421, -345.6842105263158, -325.57894736842104, -313.57894736842104, -309.0, -308.6842105263158, -310.5263157894737, -313.3157894736842, -316.57894736842104, -320.42105263157896, -322.7368421052632, -324.7368421052632, -325.57894736842104, -326.36842105263156, -327.89473684210526, -329.0, -329.8421052631579, -330.94736842105266, -331.36842105263156, -332.2105263157895, -332.0, -331.7894736842105, -331.7368421052632, -331.42105263157896, -331.6842105263158, -331.57894736842104, -332.2631578947368, -332.8421052631579, -332.2105263157895, -332.2105263157895, -332.2631578947368, -332.1578947368421, -331.89473684210526, -333.05263157894734, -333.89473684210526, -334.5263157894737, -333.63157894736844, -333.7894736842105, -334.05263157894734, -333.7894736842105, -332.6842105263158, -333.4736842105263, -332.4736842105263, -331.1578947368421, -331.3157894736842, -331.2105263157895, -330.0, -329.7894736842105, -329.89473684210526, -331.2631578947368, -332.2105263157895, -333.2105263157895, -333.4736842105263, -332.5263157894737, -331.42105263157896, -330.7368421052632, -330.36842105263156, -330.2631578947368, -330.57894736842104, -330.42105263157896, -329.94736842105266, -330.05263157894734, -330.42105263157896, -331.1578947368421, -331.94736842105266, -330.57894736842104, -329.57894736842104, -327.2631578947368, -325.2631578947368, -326.10526315789474, -326.1578947368421, -326.4736842105263, -326.7894736842105, -326.63157894736844, -325.94736842105266, -326.89473684210526, -326.7894736842105, -326.63157894736844, -327.36842105263156, -327.3157894736842, -327.1578947368421, -327.7894736842105, -328.8421052631579, -328.94736842105266, -330.57894736842104, -331.36842105263156, -331.3157894736842, -330.2105263157895},
    {-312.5, -296.5, -230.25, -204.25, -236.5, -182.0, -74.0, -376.25, -521.5, -498.25, -417.0, -340.25, -286.75, -262.0, -257.0, -261.0, -268.25, -277.5, -285.5, -293.5, -300.5, -305.5, -310.0, -315.25, -316.75, -319.25, -319.25, -321.0, -323.25, -324.5, -323.5, -325.0, -325.75, -325.5, -326.25, -325.25, -324.75, -325.75, -325.75, -324.0, -324.0, -324.25, -325.75, -331.75, -335.75, -338.0, -336.25, -334.75, -330.75, -328.25, -327.5, -325.5, -323.75, -320.75, -320.0, -318.75, -318.75, -318.5, -317.0, -317.5, -317.0, -315.75, -317.25, -315.5, -316.0, -316.75, -315.25, -314.75, -315.25, -317.0, -319.0, -319.25, -321.25, -322.0, -320.75, -319.5, -318.5, -315.75, -316.25, -317.0, -314.25, -315.5, -314.75, -314.0, -314.75, -316.25, -315.0, -315.5, -314.75, -314.75, -315.75, -317.25, -322.25, -324.25, -325.75, -326.0, -323.25, -320.0, -316.25, -315.25},
    {-320.64285714285717, -304.42857142857144, -239.5, -214.42857142857142, -246.71428571428572, -200.07142857142858, -152.35714285714286, -325.2142857142857, -391.2142857142857, -394.7857142857143, -375.85714285714283, -353.7857142857143, -338.5, -328.92857142857144, -322.5, -317.35714285714283, -312.85714285714283, -310.5, -309.92857142857144, -311.7857142857143, -314.2142857142857, -316.57142857142856, -317.7142857142857, -320.42857142857144, -322.5, -323.7142857142857, -325.35714285714283, -326.35714285714283, -327.5, -328.57142857142856, -329.42857142857144, -329.92857142857144, -330.0, -330.07142857142856, -330.7857142857143, -331.0, -331.7857142857143, -331.64285714285717, -332.14285714285717, -331.7142857142857, -331.2142857142857, -331.2857142857143, -331.42857142857144, -331.07142857142856, -331.42857142857144, -330.7857142857143, -331.42857142857144, -331.85714285714283, -330.2857142857143, -330.2857142857143, -330.42857142857144, -331.42857142857144, -331.35714285714283, -330.2857142857143, -330.07142857142856, -330.14285714285717, -330.2857142857143, -330.35714285714283, -328.57142857142856, -328.14285714285717, -329.14285714285717, -330.07142857142856, -329.85714285714283, -330.42857142857144, -329.7857142857143, -329.57142857142856, -329.5, -330.0, -329.2142857142857, -330.57142857142856, -329.57142857142856, -329.2142857142857, -328.92857142857144, -329.5, -329.2142857142857, -328.14285714285717, -326.07142857142856, -324.92857142857144, -325.2857142857143, -324.57142857142856, -323.07142857142856, -323.2857142857143, -324.5, -325.85714285714283, -327.0, -326.2142857142857, -325.85714285714283, -325.2142857142857, -324.35714285714283, -323.57142857142856, -324.5, -324.7142857142857, -325.7857142857143, -325.64285714285717, -325.42857142857144, -325.5, -324.7142857142857, -324.2142857142857, -324.14285714285717, -324.14285714285717},
    {-328.6, -318.2, -219.6, 83.2, -642.4, -243.4, -274.4, -619.8, -828.0, -767.0, -622.8, -499.2, -419.0, -377.0, -355.2, -340.6, -331.6, -324.4, -317.8, -311.8, -307.4, -303.0, -300.2, -296.6, -294.6, -289.8, -285.4, -283.0, -280.4, -278.8, -277.2, -275.8, -275.6, -274.2, -273.2, -271.8, -270.8, -270.8, -269.4, -269.8, -269.2, -270.4, -270.8, -272.4, -272.2, -273.4, -274.6, -275.6, -274.8, -275.0, -274.8, -276.4, -277.0, -276.4, -277.6, -278.8, -278.2, -278.0, -278.4, -280.0, -280.0, -281.6, -283.6, -284.0, -284.8, -285.8, -285.6, -287.0, -289.0, -290.6, -291.6, -292.0, -293.2, -294.4, -297.4, -297.6, -295.6, -294.8, -294.0, -294.2, -294.6, -296.2, -296.8, -298.0, -298.6, -300.0, -300.6, -302.0, -303.0, -302.4, -303.4, -304.6, -305.2, -308.6, -310.6, -311.6, -308.8, -306.2, -307.4, -309.0},
    {-321.5, -307.25, -241.0, -216.25, -243.25, -210.75, -211.75, -360.25, -411.75, -401.0, -366.75, -337.25, -317.75, -304.0, -302.75, -303.5, -306.0, -306.25, -310.5, -312.25, -313.5, -317.0, -319.5, -319.25, -322.75, -324.0, -325.0, -327.5, -328.0, -327.0, -327.25, -328.0, -326.0, -325.0, -326.25, -326.75, -328.25, -327.25, -329.0, -329.25, -327.0, -326.0, -326.5, -326.25, -327.0, -326.75, -327.25, -330.0, -329.0, -327.5, -326.25, -326.25, -324.75, -323.75, -322.25, -322.75, -320.75, -322.25, -322.5, -322.75, -321.75, -324.25, -325.0, -324.25, -324.25, -325.5, -325.0, -324.75, -324.25, -324.0, -324.0, -324.5, -326.0, -325.25, -326.25, -327.5, -325.0, -326.0, -325.25, -326.25, -325.5, -324.75, -324.0, -324.75, -323.75, -321.5, -320.25, -322.25, -321.5, -321.25, -321.75, -321.0, -320.25, -321.75, -320.0, -322.0, -322.0, -322.0, -324.0, -322.25}
};


#define gpuErrchk(ans, stream) { gpu_check_return_code( (ans), (stream), __FILE__, __LINE__ ); } /* Assert to avoid passing arguments like __FILE__ */

/* \brief Check if cuda related function worked correctly or not. Upon error write problem to standard error output and exit program.
 * \param[in] code - return value from GPU
 * \param[in] stream_id - stream the checked function was called on
 * \param[in] p_file_name - name of current file
 * \param[in] line - line it was called on in given file
 * \return None
 */
inline void gpu_check_return_code(cudaError_t code, int stream_id, const char * p_file_name, int line)
{
   if (code != cudaSuccess) 
   {
      fprintf(stderr,"Problem on stream %d: %s %s %d\n", stream_id, cudaGetErrorString(code), p_file_name, line);

      exit(code);
   }
}


#endif